2003-07-27  Thorsten Jordan <thorsten_jordan@gmx.de>
	* user_interface.cpp
	  - ships are selectable by clicking on the map.
	* submarine_interface.cpp
	  - first bits of torpedo programming interface for FATs.
	  - turn switches are drawn and are turnable.

2003-07-27  Thorsten Jordan <thorsten_jordan@gmx.de>
	* game.cpp
	  - some preparations for damage simulation

2003-07-26  Thorsten Jordan <thorsten_jordan@gmx.de>
	* user_interface.cpp
	  - new panel design, panel features resize, hiding planned.

2003-07-25  Thorsten Jordan <thorsten_jordan@gmx.de>
	* user_interface.cpp
	  - introduced fog.
	* game.cpp
	  - fixed cloud clip bug.

2003-07-23  Thorsten Jordan <thorsten_jordan@gmx.de>
	* Improved conning tower model with textures.

2003-07-22  Thorsten Jordan <thorsten_jordan@gmx.de>
	* user_display.cpp
	  - added display of conning tower model.

2003-07-17  Thorsten Jordan <thorsten_jordan@gmx.de>
	* sound.cpp
	  - used SDL_InitSubSystem at pre-Init stage.

2003-07-13  Thorsten Jordan <thorsten_jordan@gmx.de>
	* submarine_interface.cpp
	  - show torpedo that is to be moved as ghost image.

2003-07-13  Thorsten Jordan <thorsten_jordan@gmx.de>
	* submarine_interface.cpp
	  - implemented manual torpedo (re)loading and transfer.
	    automatic loading disabled.

2003-07-13  Thorsten Jordan <thorsten_jordan@gmx.de>
	* new model: small tanker. (now 11 ship and sub models)

2003-07-13  Thorsten Jordan <thorsten_jordan@gmx.de>
	* font.h font.cpp (and client files)
	  - replaced "const char" with "string"
	* submarine_interface.cpp
	  - new torpedo images and drawing.
	  - draw info about available torpedo types.

2003-07-13  Thorsten Jordan <thorsten_jordan@gmx.de>
	* replaced medium merchant model by new model.
	* introduced small merchant model.
	  - now ten ships available, 3 merchants, 2 freighters, 2 warships,
	    1 troopships, 2 escorts.

2003-07-12  Thorsten Jordan <thorsten_jordan@gmx.de>
	* further new model.

2003-07-11  Thorsten Jordan <thorsten_jordan@gmx.de>
	* introduced two new models.

2003-07-11  Thorsten Jordan <thorsten_jordan@gmx.de>
	* sea_object.cpp game.cpp convoy.cpp etc.
	  - new throttle model. more code for custom mission generation.

2003-07-10  Thorsten Jordan <thorsten_jordan@gmx.de>
	* gun_shell.h gun_shell.cpp
	  - new simulation of shot trajectory.
	  - correct rotation of shell model for display
	* user_interface.cpp
	  - display sum of sunken tons

2003-07-09  Thorsten Jordan <thorsten_jordan@gmx.de>
	* made release 0.0.11 and increased version number to 0.0.12

2003-07-09  Thorsten Jordan <thorsten_jordan@gmx.de>
	* model.cpp
	  - replaced construct that was compiled wrongly by VC++6.
	    Now this win32 bug is fixed.
	    VC6 can't compile "Release" but "Debug" only ("internal
	    compiler error").
	    What a faulty compiler! Anyone wants to try WatcomC++ 11
	    on this? or gcc/win32?

2003-07-07  Thorsten Jordan <thorsten_jordan@gmx.de>
	* user_interface.cpp
	  - fixed code for new water, removed old water code.

2003-07-06  Thorsten Jordan <thorsten_jordan@gmx.de>
	* game.cpp
	  - end game when contact to enemy is lost

2003-07-06  Thorsten Jordan <thorsten_jordan@gmx.de>
	* game.h game.cpp
	  - first bits of result recording and display, rather experimental.

2003-07-06  Thorsten Jordan <thorsten_jordan@gmx.de>
	* smokestream.cpp
	  - segfault reason found & fixed

2003-07-06  Thorsten Jordan <thorsten_jordan@gmx.de>
	* begun Win32 Port.
	  It compiles, links and runs, BUT:
	  - there is no mouse pointer.
	  - models are not read or drawn right, they look like rotated
	    around their length axis and normal vectors inverted.
	  - many dirty hacks are neccessary to work with Visual C++ 6,
	    most ugly:
	    #define for if(0);else for to avoid VC6 compiler bug.
	    change private: to public: (VC6 ignores friend decl.)
	    Disabled glPaletteEXT (MSDN says "ok", VC6 says "no")
	  - You'll need to alter the SDL paths in the project file.
	  - Possible trash of memory after exit (Win98 crashed 20 seconds
	    later)
	  - Speed seems ok.

2003-07-06  Thorsten Jordan <thorsten_jordan@gmx.de>
	* convoy.cpp game.cpp subsim.cpp
	  - first bits of custom mission generation.

2003-07-05  Thorsten Jordan <thorsten_jordan@gmx.de>
	* ship_corvette.* and related files.
	  - new model.
	* ai.cpp
	  - made destroyer course computation a bit smarter.
	* game.h game.cpp user_interface.cpp
	  - new clouds.
	* submarine_interface.cpp user_interface.cpp
	  - head to course is shown in gauge.
	* angle.h
	  - removed silly operator<,>,<=,>= functions.

2003-07-04  Thorsten Jordan <thorsten_jordan@gmx.de>
	* smoke_stream.* ship.*
	  - made smoke less denser and reduce particle number
	* ship.h ship.cpp
	  - moved ai/smoke_stream related methods to .cpp file to reduce
	    header file dependencies. This should be done everywhere to
	    reduce compile times for developing. Seems ok so far.
	* ai.h ai.cpp
	  - shifted dependencies.

2003-07-03  Thorsten Jordan <thorsten_jordan@gmx.de>
	* menu.h menu.cpp
	  - improved menu design and input
	* model.h model.cpp
	  - faster model drawing using OpenGL features
	* vector2.h vector2.cpp vector3.h vector3.cpp
	  - changed classes to templates.
	* smoke_stream.* ship.*
	  - introduced smoke streams caused by ships (experimental)
	* all over the place
	  - changed text handling to new model
	  - many miscellaneous changes (new clouds test, ...)

2003-07-02  Markus Petermann  <m.petermann@gmx.net>
	* game.cpp: When a ship is sunk the right text is choosed now.
	* submarine_interface.cpp: When a submarine launches a torpedo the
	  right text is choosed now.

2003-06-16  Thorsten Jordan <thorsten_jordan@gmx.de>
	* user_interface, submarine_interface, ship_interface
	  - moved damage related data directly to class submarine
	  - made display_damage_status() in user_interface abstract, moved
	    code to submarine_interface, where it belongs.
	  - introduced icons showing damage status.

2003-06-11  Thorsten Jordan <thorsten_jordan@gmx.de>
	* released version 0.0.10 and updated version number to 0.0.11

2003-06-07  Thorsten Jordan <thorsten_jordan@gmx.de>
	* shifted damage display to own class, some adds.

2003-05-31  Markus Petermann  <m.petermann@gmx.net>
	* date.h:
	  - Month october added.
	
2003-05-30  Thorsten Jordan <thorsten_jordan@gmx.de>

	* global_data.h, global_data.cpp
	  - introduced image making. Maybe we should use SDL-mm?
	* user_interface.h, user_interface.cpp
	  - display of background image as a start.
	    this should move to submarine_interface.cpp later
	    Maybe we should load images on demand when switching screens?
	    Or keeping them in system memory and copying them when switching
	    screens? This would save a lot of graphic memory.

2003-05-14  Markus Petermann  <m.petermann@gmx.net>

	* submarine_VII.cpp, submarine_XXI.cpp:
	  - Fuel and battery consumption factors modified: The original t values where
	    calculated for knots, not meters per seconds.
	* user_interface.cpp, submarine_interface.cpp:
	  - New gauges for diesel fuel amount and battery charge.
	* game.cpp:
	  - Use the torpedos position as detonation point, not the ships position.
	* global_data.h, global_data.cpp:
	  - Load one further gauge.
	* parser.cpp:
	  - New tokens for fuel amount and battery charge.
	* ship.cpp:
	  - Set fuel_level default value to 1.
	  - Use parser for mission specific fuel values.
	  - Call ai only when AI is available. That is not the case on the players unit.
	* ship.h:
	  - Method to return fuel_level.
	* submarine.cpp:
	  - Set battery_level default value to 1.
	  - Use parser for mission specific battery charge.
	  - Call ship::simulate and not sea_object::simulate method. ship is the direct
	    father class of submarine, not sea_object.
	* submarine.h:
	  - Method to return battery_level.
	* submarine_XXI.cpp, submarine_VII.cpp:
	  - Fuel consumption and battery decharge rate modified. The original values
	    were calculated for knots, but meters per second is used.
	* submarine_interface.h, submarine_interface.cpp:
	  - New method display_gauges.
	* texts.h:
	  - New texts for battery and diesel fuel gauges.
	* tokencodes.h:
	  - New tokens for fuel amount and battery charge.
	* user_interface.h, user_interface.cpp:
	  - New methods display_manometer_gauge.

2003-05-12  Markus Petermann  <m.petermann@gmx.net>

	* submarine_interface.cpp:
	  - When no target is selected but a torpedo is launched the simulation aborts.
	    This error is corrected.

2003-05-07  Markus Petermann  <m.petermann@gmx.net>

	* sound.h, sound.cpp:
	  - Minor changes. Return value of function SDL_OpenAudio was not evaluated
	    properly.

2003-04-30  Markus Petermann  <m.petermann@gmx.net>

	* global_data.h, global_data.cpp, logbook.cpp:
	  - Variable woodbg renamed to woodbackgr.
	* ships_sunk_diplay.h, ships_sunk_display.cpp:
	  - New module introduced. Can be used to display type, tonnage and 
	    silhouette of ships sunk by player.

2003-04-29  Markus Petermann  <m.petermann@gmx.net>

	* logbook.cpp:
	  - Extend the area that can be used to change logbook page.
	  - Change pages with '<' and '>' keys.
	  - Wooden desk as background.
	* game.cpp:
	  - When two torpedos hit one target, it is sunk twice.
	* torpedo.h, torpedo.cpp:
	  - New method get_hit_points to create torpedos with different
	    detonation power.

2003-04-25  Markus Petermann  <m.petermann@gmx.net>

	* logbook.h, logbook.cpp:
	  - New module to create logbook entries.

2003-04-21  Markus Petermann  <m.petermann@gmx.net>

	* sound.h, sound.cpp:
	  - Removed some methods.
	  - When a sound is not found the game does not exit anymore.
	* user_interface.h, user_interface.cpp:
	  - New methods to play sound effects introduced.
	* angle.h:
	  - Operator < changed.
	* global_data.h, global_data.cpp:
	  - More sound effects.
	* ai.cpp:
	  - Some randomize in the ai methods.
	* game.cpp:
	  - In the detection methods the very own ship is no longer detected anymore.
	* submarine.h, submarine.cpp:
	  - Methods to play sound effects changed.

2003-04-19  Markus Petermann  <m.petermann@gmx.net>

	* sound.h, sound.cpp:
	  - New module for sound effects.
	* game.cpp:
	  - Sound effects for torpedo detonation.
	* submarine.cpp:
	  - Sound effect for torpedo launch.
	  - Noise modification factor changed.
	* global_data.cpp, global_data.h:
	  - Sound effects are loaded now
	* water_splash.h, water_splash.cpp:
	  - Created new classes for diverse water splash types.
	* makedatapack:
	  - data/sounds is now copied to archive now.

2003-04-18  Markus Petermann  <m.petermann@gmx.net>

	* water_splash.h, water_splash.cpp:
	  - New system for multiple texture display introduced.
	* user_interface.cpp:
	  - Night mode color changed.
	  - Console is no longer displayed in night mode.
	* submarine_interface.cpp:
	  - Lead angle system activated.

2003-04-17  Markus Petermann  <m.petermann@gmx.net>

	* ship.h, ship.cpp, submarine.h, submarine.cpp:
	  - Fuel and battery consumption introduces. Battery recharged is still
	    uncomplete because there are currently no time value available for
	    the recharge process.
	  - Snorkel use modified.
	* game.h, game.cpp:
	  - New method is_day_mode introduced. This method is needed to activate
	    red light mode during night.
	  - Time gap for night mode modified.
	* user_interface.h, user_interface.cpp, sub_interface.cpp:
	  - New methods for red light mode.
	  - Red light mode during night.
	  - Diverse method calls changed. New parameter of class game needed.
	* texts.h:
	  - Several new text entries.
	* parser.cpp:
	  - Snorkel entries changed.
	* submarine_XXI.cpp:
	  - Snorkel is a standard equipment of Type XXI submarines.
	* tokencodes.h
	  - Tokens for snorkel changed.

2003-04-13  Markus Petermann  <m.petermann@gmx.net>

	* game.h, game.cpp:
	  - ..._in_direction methods modified.
	  - New method contact_in_direction introduced.
	* user_interface.cpp:
	  - Draw a red box around the selected target.
	  - Moved method add_rudder_message from submarine_interface to this module.
	* submarine_interface.h, submarine_interface.cpp:
	  - Moved method add_rudder_message to module user_interface.
	* angle.h
	  - Comparison methods introduced.
	* parser.cpp, tokencodes.h:
	  - New tokens for snorkel.

2003-04-10  Markus Petermann  <m.petermann@gmx.net>

	* vector2.h, vector2.cpp, vector3.h, vector3.cpp:
	  - New operator<< introduced.

2003-04-09  Markus Petermann  <m.petermann@gmx.net>

	* game.h, game.cpp:
	  - New method sonar_acoustical_torpedo_target determines the loudest target
	    within detection cone and range and returns a pointer to this object.
	* sensors.h, sensors.cpp:
	  - sensor_factory removed
	  - passive_sonar used actual position of target, not its noise source.

	* date.h, date.cpp:
	  - New module for date calculations and comparisons.

2003-04-06  Markus Petermann  <m.petermann@gmx.net>

	* water_splash.h, water_splash.cpp:
	  - Water splash when a torpedo detonates or a gun shell hits water.

	* submarine_interface.cpp:
	  - Zoomable periscope. Use y key for zoom mode. UZO view is zoomed.

	* user_interface.cpp:
	  - Glasses view is zoomed.

	* global_data.h, global_data.cpp:
	  - New texture for torpedo detonation water splash is loaded.

	* game.h, game.cpp:
	  - New list water_splashs introduced and used.

	* gun_shell.cpp:
	  - When gun shell impacts on water a splash is created.

2003-04-05  Markus Petermann  <m.petermann@gmx.net>

	* sea_object.h, airplane.h, depth_charge.h, convoy.h, game.cpp, gun_shell.h,
	  sensors.h, sensors.cpp, ship.h, ship_interface.h, submarine.cpp,
	  submarine.h, submarine_interface.cpp, torpedo.h, user_interface.h,
	  user_interface.cpp:
	  - Removed conversion methods. dynamic_cast are now used to verify the
	    exact class of an object.

2003-04-05  Markus Petermann  <m.petermann@gmx.net>

	* game.cpp:
	  - Passive sonar contacts are grouped and not more than 5 are displayed.
	  - New method get_depth_factor introduced.

	* sensors.h, sensors.cpp:
	  - Method do_noise_mod removed. This is a ship, submarine etc. specific value.

	* sea_object.h, sea_object.cpp, submarine.h, submarine.cpp:
	  - New method get_noise_factor introduced.

	* gun_shell.cpp:
	  - Error in method simulate corrected. The position of the shell is now
	    calculated correctly. But their is still something to do within the
	    ai module to adjust the firing parameter (elevation and direction).

2003-04-04  Markus Petermann  <m.petermann@gmx.net>

	* submarine.h, submarine.cpp, submarine_VII.cpp, submarine_XXI.cpp:
	  - New sonar cross section introduced. This factor is needed for active
	    sonar detection, because the visual cross section are (maybe) not
	    appropiate for this.

2003-04-04  Markus Petermann  <m.petermann@gmx.net>

	* ai.cpp:
	  - The attribute attackrun was not initialized. Due to this error the
	    destroyers are immediately in attack mode and do not using their
	    sonar system.

	* sensors.h, sensors.cpp:
	  - New sensor classes that can be used within diverse methods.

	* game.cpp:
	  - The new sensor methods from sensors modul are used.

	* sea_object.h:
	  - A new attribute for all sea_objects storing sensor informations.

	* sea_object.cpp:
	  - New methods to alter sensor informations.

	* ship.cpp, ship_battleshipmalaya.cpp, ship_carrierbogue.cpp,
	  ship_destroyertribal.cpp, ship_mediummerchant.cpp, ship_mediumtroopship.cpp,
	  submarine.cpp, submarine_VIIc.cpp, submarine_XXI.cpp, torpedo.cpp:
	  - New sensors are introduced.


2003-04-02  Markus Petermann  <m.petermann@gmx.net>

    * sea_object.cpp:
      - Corrected an error in method surface_visibility: A minimum distance of
        0.01 m must be obeyed when calculating the visible profile factor.

    * submarine.cpp:
      - Corrected an error in method surface_visibility: A minimum distance of
        0.01 m must be obeyed when calculating the visible profile factor.

2003-04-01  Markus Petermann  <m.petermann@gmx.net>

    * submarine.cpp:
      - surface_visibility changed: Profile factor is now calculated and used.
      
    * sea_object.cpp:
      - Methods calc_visible_profile_factor and surface_visibility defined.

    * sea_object.h:
      - New attribute cross_section_factor.
      - New methods get_cross_section_factor, calc_visible_profile_factor and
        surface_visibility declared.
      
2003-04-01  Markus Petermann  <m.petermann@gmx.net>

    * global_data.h:
      - New texture object glasses.

    * global_data.cpp:
      - glasses object is filled.

    * seaobject.h:
      - New rudder feature added.

    * seaobject.cpp:
      - New rudder feature added.

    * submarine.h:
      - New method get_max_depth returns the maximum dive depth of a submarine.
      - New switch for electric engine. This is needed e.g. for detection reasons
        using passive sonar.
      - snorkel_depth added

    * submarine.cpp:
      - max_submerged_speed is returned when electric engine is activated. max_speed
        else.
      - Electric engine is launched while diving.
    
    * submarine_interface.cpp:
      - Changed the way the rudder works.

    * submarine_interface.h:
      - New method to create a message about the rudder state.

	* user_interface.h:
      - New method display_glasses.

 	* user_interface.cpp:
      - When the submarine is on periscope depth and the periscope is up all
        visual contacts are now shown on map.
      - Use y- and x-keys in bridge mode to swap to glasses view.
      
2003-04-01  Markus Petermann  <m.petermann@gmx.net>
      
	* seaobject.h:
      - New method get_depth added.

	* submarine.h:
      - New attribute periscope_depth.
      - Two new methods get_periscope_depth and is_submerged.

	* submarine.cpp:
      - Changed constructor.

	* submarine_interface.h:
      - Declared some methods virtual.

	* submarine_interface.cpp:
      - Use method get_periscope_depth instead calculating depth everytime
        it is needed.

	* user_interface.h:
      - Definition of constructor user_interface removed.
      - New methods draw_pings, draw_visual_contacts and draw_sound_contacts
        declared.
	  - Declared some methods virtual.

	* user_interface.cpp:
      - Moved constructor user_interface from header file to source file.
      - New methods draw_pings, draw_visual_contacts, draw_sound_contacts
        defined and called from method display_map.
